<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $interval, spUtil) {
	var c=this;
	$interval (function(){
		spUtil.update($scope);
	}, c.options.widgetupdate);
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.box {
  text-transform: uppercase;
  font-size: 18px;
  font-weight: bold;
  margin-left: 10px;
  color: #3a444a;
}

.backupText {
  color: #3a444a;
  font-size: 18px;
  font-weight: bold;
  margin: 10px;
}

#mtable {
    display: table;   
}

div.row &gt; button {
  float:left;
}

.backupText {
  color: #3a444a;
  font-size: 18px;
  font-weight: bold;
  margin: 10px;
}

.mtable div.row {
  width: 100%;
  margin: 0 auto;
}

.box {
  text-transform: uppercase;
  font-size: 18px;
  font-weight: bold;
  margin-left: 10px;
  color: #3a444a;
}

.box2 {
  text-transform: uppercase;
  width:89%;
  font-size: 18px;
  font-weight: bold;
  margin-left: 10px;
  margin-top: 10px;
  margin-bottom: 10px;
  color: white;
}

button {
  background: #3a444a;
  color: white;
  width: 180px;
  height: 50px;
  margin: 5px;
  box-shadow: 0 6px 6px -3px #242f36;
  text-transform: uppercase;
  font-weight: bold;
  text-align: center;
  border:none;
  transition: all 0.3s;
}

button:hover {
  background: #b2c2cf;
  color: white;
}

.row {
  display:table-row;
}

.cell {
  width:25%;
}

.critical {  
  background-color:#c71f3b!important;
}

.major {
  background-color:#6b2cec!important;
}

.minor {
  background-color:#ff8700!important;
}

.warning {
  background-color:#ecd82c!important;
}

.informational {
  background-color:#3bb3c9!important;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>boview</id>
        <internal>false</internal>
        <link/>
        <name>BO View</name>
        <option_schema>[{"name":"widgetupdate","default_value":"60000","label":"Widget Update Time in Milliseconds","type":"integer"}]</option_schema>
        <public>false</public>
        <roles>x_agsa_sapcockpit.user</roles>
        <script><![CDATA[(function() {
	gs.include('ProMonitorLib');
  var promon=new ProMonitorLib();
	data.list=[];
	data.list2=[];
	data.config=[
		{"name":"SYSTEM","modules":"SAP_SYSTEM"},
		{"name":"SERVICES","modules":"HANA_SERVICES"},
		{"name":"PROPERTIES","modules":"HANA_CPU"},
		{"name":"CMC / AUDIT","modules":"HANA_DISK"},
		{"name":"USERS","modules":"HANA_MEMORY"},
		{"name":"SCHEDULES","modules":"HANA_NODES"}
	];
	refresh_threshold=options.alerttime;
	if ($sp.getParameter('system') == undefined) {
		system='';
	} else {
		system=$sp.getParameter('system');
	}
	data.system=system;
	data.wer=promon.returnInfo('System Availability','ALL','SYSTEM_AVAILABILITY',system)
	data.count=promon.getTotalAlarmCount(system);
	// Get node list, build first Table
	node=getNode('HANA_NODE_AVAILABILITY');

	// Now For each node, we need info
	for (var i=0;i<node.length;i++) {
		obj={};
		// Check availability
		obj.name=node[i];
		obj.status=checkAvailability(node[i],'HANA_NODE_AVAILABILITY').status;
		obj.statusValue=checkAvailability(node[i],'HANA_NODE_AVAILABILITY').statusValue;
		// Get infos
		obj.cpu= parseInt(getAgg(node[i],'DB_CPU_UTILIZATION'));
		obj.mem= parseInt(getAgg(node[i],'DB_MEMORY_PERCENTAGEUSED_TOTAL_RESIDENT_MEMORY'));
		obj.bck= parseInt(getAgg(node[i],'DISK_DATA_BACKUP_PERCENTAGE_USED'));
		obj.data= parseInt(getAgg(node[i],'DISK_DATA_PERCENTAGE_USED'));
		obj.log= parseInt(getAgg(node[i],'DISK_LOG_PERCENTAGE_USED'));
		obj.conn=parseInt(getAgg(node[i],'CONNECTION_COUNT'));
		obj.sid=system;
		data.list.push(obj);
	}
		
	// Get service-node list, build second table
	node=getNode('SERVICE_STATUS');
	for (i=0;i<node.length;i++) {
		obj={};
		// Check availability
		obj.shost=node[i].split(' - ')[0];
		obj.sservice=node[i].split(' - ')[1];
		obj.sstatus=checkAvailability(node[i],'SERVICE_STATUS').status;
		obj.statusValue=checkAvailability(node[i],'SERVICE_STATUS').statusValue;
		// Get CPU infos
		obj.scpu= getAgg(node[i],'DB_CPU_UTILIZATION_PER_SERVICE');
		obj.smem= parseInt(getAgg(node[i],'MEMORY_PERCENTAGEUSED_PER_SERVICE'));
		data.list2.push(obj);
	}
	
	//
	obje={};
	data.list3=[];
	data.count=promon.getTotalAlarmCount(system);
	for (var j=0;j<data.config.length;j++) {
		obje.name=data.config[j].name;
		obje.sid=system;
		obje.color=getHighestLevel(system,data.config[j].modules);
		mod="module="+data.config[j].modules;
		if (data.config[j].modules.split(',').length > 1)
			mod=mod.replace(/,/g,'^ORmodule=');
		obje.module=mod;
		data.list3.push(obje);
		obje={}
	}
	/*
	//GETdb last backup 
	var getDBbackupAge=new GlideRecordSecure("x_agsa_sapcockpit_last_metric");
	getDBbackupAge.addQuery("sid",system);
	getDBbackupAge.addQuery("name","DATABASE_BACKUP_AGE");
	getDBbackupAge.query();
	while (getDBbackupAge.next()) {
		data.backupage=promon.SplitTime(getDBbackupAge.data/60);
	}*/
	// Function
	function getHighestLevel(system,mod) {
			var getSev = new GlideRecordSecure("x_agsa_sapcockpit_alarm");
			getSev.addQuery('sid',system);
			getSev.addQuery('module','IN',mod);
			getSev.addQuery('acknowledge',false);
			getSev.orderByDesc('severity_code');
			getSev.query();
			if (getSev.next()) 
				return getSev.severity.toLowerCase();
			return 'ok';
	}
	
	function countActive(state,metric,target) {
		var nbact=0;
		var nsc = new GlideAggregate("x_agsa_sapcockpit_last_metric");
		nsc.addQuery('metric',metric);
		nsc.addQuery('sid',system);
		if (state === false) {
			nsc.addQuery('value',state);
		}
		nsc.addQuery('target',target);
		nsc.addAggregate('COUNT');
		nsc.query();
		if (nsc.next())	
			nbact=nsc.getAggregate('COUNT');
		return nbact;
	}
	
	// Aggregate metric
	function getAgg(target,metric) {
		var avg=-1;
		var count = new GlideAggregate('x_agsa_sapcockpit_last_metric');
		count.addEncodedQuery('sid='+system+'^target='+target+'^metric='+metric);
		count.addAggregate('AVG','value');
		count.query();
		while(count.next()){
			avg = count.getAggregate('AVG','value');
		}
		return avg;
	}
	
	// Return the list of metric targets
	function getNode(metric) {
		node=[];
		var nd = new GlideAggregate("x_agsa_sapcockpit_last_metric");
		nd.addQuery('metric',metric);
		nd.addQuery('sid',system);
		nd.addAggregate('COUNT', 'target');
		nd.query();
		while(nd.next()) {
			node.push(nd.target.toString());
		}
		return node;	
	}
	
	// Return Availbaility of the metric
	function checkAvailability(target,metric) {
		var obj={};
		var total=countActive(total,metric,target);
		var inact=countActive(false,metric,target);
		if (total == inact ) {
			obj.status='false';
			obj.statusValue='DOWN';
		} else {
			obj.status='true';
			obj.statusValue='OK';
		}
		return obj;	
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-12-17 09:11:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f6d3ac7bdb12af4088dedf8b4b9619f7</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>BO View</sys_name>
        <sys_package display_value="SAPCockpit" source="x_agsa_sapcockpit">e8dd70d1dbcacb407bd0f13daf96199c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SAPCockpit">e8dd70d1dbcacb407bd0f13daf96199c</sys_scope>
        <sys_update_name>sp_widget_f6d3ac7bdb12af4088dedf8b4b9619f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-12-17 14:30:54</sys_updated_on>
        <template><![CDATA[<link href="f989cff14f4a430033e71aabb110c71b.cssdbx?" rel="stylesheet" type="text/css" />
<br/>
<div class="mtable">
  <div class="box">Business Object {{data.system}} - Total Active Alarms : {{data.count}}</div>
  <div class="box2" ng-if='data.wer.status == "true"' style='background-color:#3bc999;text-align:center;box-shadow: 0 6px 6px -3px #242f36;'> System is ONLINE</div>
  <div class="box2" ng-if='data.wer.status == "false"' style='background-color:#c71f3b;text-align:center;box-shadow: 0 6px 6px -3px #242f36;'>SYSTEM IS DOWN</div>
  <div class="box2" ng-if='data.wer.status == ""' style='background-color:#3bc999;text-align:center;box-shadow: 0 6px 6px -3px #242f36;'>NOT STATUS !</div>
    <div class="row">
      <a ng-repeat="item in data.list3" ng-href="/x_agsa_sapcockpit_alarm_list.do?sysparm_query=acknowledge!%3Dtrue%5Esid={{item.sid}}%5E{{item.module}}" target="_blank">
        <button ng-class="{'{{item.color}}':item.color}">{{item.name}}</button>
      </a>
      <div id="space"/>
  </div>
<br>
</div>

<br>
]]></template>
    </sp_widget>
</record_update>
